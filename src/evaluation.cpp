#include <evaluation.h>


const int Evaluation::pieceMatValues[6] = { 100, 500, 320, 330, 900, 0 };

const int Evaluation::piecePhaseValues[6] = { 0, 2, 1, 1, 4, 0 };

const int Evaluation::startPhase = 16 * Evaluation::piecePhaseValues[Pawn] + 4 * Evaluation::piecePhaseValues[Knight]
+ 4 * Evaluation::piecePhaseValues[Bishop] + 4 * Evaluation::piecePhaseValues[Rook] + 2 * Evaluation::piecePhaseValues[Queen];

const int Evaluation::mg_pcsq[6][64] = {
    { // Pawn
        0, 0, 0, 0, 0, 0, 0, 0,
        -10, -8, 1, 1, 1, 1, -8, -10,
        -10, -8, 1, 2, 2, 1, -8, -10,
        -10, -8, 2, 8, 8, 2, -8, -10,
        -10, -8, 5, 10, 10, 5, -8, -10,
        -8, -8, 1, 5, 5, 1, -8, -8,
        -10, -8, 1, -24, -24, 1, -8, -10,
        -10, -8, 1, -24, -24, 1, -8, -10
    },
    { // Rook
        5, 5, 5, 5, 5, 5, 5, 5,
        -5, 0, 0, 0, 0, 0, 0, -5,
        -5, 0, 0, 0, 0, 0, 0, -5,
        -5, 0, 0, 0, 0, 0, 0, -5,
        -5, 0, 0, 0, 0, 0, 0, -5,
        -5, 0, 0, 0, 0, 0, 0, -5,
        -5, 0, 0, 0, 0, 0, 0, -5,
        0, 0, 0, 2, 2, 0, 0, 0
    },
    { // Knight
        -8, -8, -8, -8, -8, -8, -8, -8,
        -8, 0, 0, 0, 0, 0, 0, -8,
        -8, 0, 4, 6, 6, 4, 0, -8,
        -8, 0, 6, 8, 8, 6, 0, -8,
        -8, 0, 6, 8, 8, 6, 0, -8,
        -8, 0, 4, 6, 6, 4, 0, -8,
        -8, 0, 1, 2, 2, 1, 0, -8,
        -16, -12, -8, -8, -8, -8, -12, -16
    },
    { // Bishop
        -4, -4, -4, -4, -4, -4, -4, -4,
        -4, 0, 0, 0, 0, 0, 0, -4,
        -4, 0, 2, 4, 4, 2, 0, -4,
        -4, 0, 4, 6, 6, 4, 0, -4,
        -4, 0, 4, 6, 6, 4, 0, -4,
        -4, 1, 2, 4, 4, 2, 1, -4,
        -4, 2, 1, 1, 1, 1, 2, -4,
        -4, -4, -12, -4, -4, -12, -4, -4
    },
    { // Queen
        0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1, 1, 1, 1, 0, 0,
        0, 0, 1, 2, 2, 1, 0, 0,
        0, 0, 2, 3, 3, 2, 0, 0,
        0, 0, 2, 3, 3, 2, 0, 0,
        0, 0, 1, 2, 0, 1, 0, 0,
        0, 0, 1, 1, 1, 1, 0, 0,
        -5, -5, -5, -5, -5, -5, -5, -5
    },
    { // King
        -40, -30, -50, -70, -70, -50, -30, -40,
        -30, -20, -40, -60, -60, -40, -20, -30,
        -20, -10, -30, -50, -50, -30, -10, -20,
        -10, 0, -20, -40, -40, -20, 0, -10,
        0, 10, -10, -30, -30, -10, 10, 0,
        10, 20, 0, -20, -20, 0, 20, 10,
        30, 40, 20, 0, 0, 20, 40, 30,
        40, 50, 30, 10, 10, 30, 50, 40
    }
};

const int Evaluation::eg_pcsq[6][64] = {
    { // Pawn
        0, 0, 0, 0, 0, 0, 0, 0,
        -10, -8, 1, 1, 1, 1, -8, -10,
        -10, -8, 1, 2, 2, 1, -8, -10,
        -10, -8, 2, 8, 8, 2, -8, -10,
        -10, -8, 5, 10, 10, 5, -8, -10,
        -8, -8, 1, 5, 5, 1, -8, -8,
        -10, -8, 1, -24, -24, 1, -8, -10,
        -10, -8, 1, -24, -24, 1, -8, -10
    },
    { // Rook
        5, 5, 5, 5, 5, 5, 5, 5,
        -5, 0, 0, 0, 0, 0, 0, -5,
        -5, 0, 0, 0, 0, 0, 0, -5,
        -5, 0, 0, 0, 0, 0, 0, -5,
        -5, 0, 0, 0, 0, 0, 0, -5,
        -5, 0, 0, 0, 0, 0, 0, -5,
        -5, 0, 0, 0, 0, 0, 0, -5,
        0, 0, 0, 2, 2, 0, 0, 0
    },
    { // Knight
        -8, -8, -8, -8, -8, -8, -8, -8,
        -8, 0, 0, 0, 0, 0, 0, -8,
        -8, 0, 4, 6, 6, 4, 0, -8,
        -8, 0, 6, 8, 8, 6, 0, -8,
        -8, 0, 6, 8, 8, 6, 0, -8,
        -8, 0, 4, 6, 6, 4, 0, -8,
        -8, 0, 1, 2, 2, 1, 0, -8,
        -16, -12, -8, -8, -8, -8, -12, -16
    },
    { // Bishop
        -4, -4, -4, -4, -4, -4, -4, -4,
        -4, 0, 0, 0, 0, 0, 0, -4,
        -4, 0, 2, 4, 4, 2, 0, -4,
        -4, 0, 4, 6, 6, 4, 0, -4,
        -4, 0, 4, 6, 6, 4, 0, -4,
        -4, 1, 2, 4, 4, 2, 1, -4,
        -4, 2, 1, 1, 1, 1, 2, -4,
        -4, -4, -12, -4, -4, -12, -4, -4
    },
    { // Queen
        0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1, 1, 1, 1, 0, 0,
        0, 0, 1, 2, 2, 1, 0, 0,
        0, 0, 2, 3, 3, 2, 0, 0,
        0, 0, 2, 3, 3, 2, 0, 0,
        0, 0, 1, 2, 0, 1, 0, 0,
        0, 0, 1, 1, 1, 1, 0, 0,
        -5, -5, -5, -5, -5, -5, -5, -5
    },
    { // King
        -72, -48, -36, -24, -24, -36, -48, -72,
        -48, -24, -12, 0, 0, -12, -24, -48,
        -36, -12, 0, 12, 12, 0, -12, -36,
        -24, 0, 12, 24, 24, 12, 0, -24,
        -36, -12, 0, 24, 24, 12, 0, -24,
        -36, -12, 0, 24, 24, 12, 0, -24,
        -48, -24, -12, 0, 0, -12, -24, -48,
        -72, -48, -36, -24, -24, -36, -48, -72
    }
};

const int Evaluation::mg_pieceMobWeights[6] = { 2, 2, 2, 2, 2, 1 };

const int Evaluation::eg_pieceMobWeights[6] = { 4, 4, 4, 4, 4, 1 };

const int Evaluation::pieceMobPenalties[6] = { 0, 7, 0, 0, 14, 0 };

const int Evaluation::mg_pieceTropismWeights[5] = { 1, 2, 3, 2, 2 };

const int Evaluation::eg_pieceTropismWeights[5] = { 1, 1, 3, 1, 4 };

const int Evaluation::pieceAttWeights[5] = { 1, 3, 1, 3, 5 };

const int Evaluation::safetyTable[100] = {
    0,   0,   1,   2,   3,   5,   7,   9,  12,  15,
    18,  22,  26,  30,  35,  39,  44,  50,  56,  62,
    68,  75,  82,  85,  89,  97, 105, 113, 122, 131,
    140, 150, 169, 180, 191, 202, 213, 225, 237, 248,
    260, 272, 283, 295, 307, 319, 330, 342, 354, 366,
    377, 389, 401, 412, 424, 436, 448, 459, 471, 483,
    494, 500, 500, 500, 500, 500, 500, 500, 500, 500,
    500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
    500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
    500, 500, 500, 500, 500, 500, 500, 500, 500, 500
};

int Evaluation::get_mg_pcsq(PieceColor color, PieceType type, char x, char y)
{
    if (color == White)
        return mg_pcsq[type][(7 - y) * 8 + x];
    else
        return mg_pcsq[type][y * 8 + x];
}

int Evaluation::get_eg_pcsq(PieceColor color, PieceType type, char x, char y)
{
    if (color == White)
        return eg_pcsq[type][(7 - y) * 8 + x];
    else
        return eg_pcsq[type][y * 8 + x];
}
